class Solution {
    public boolean isPalindrome(ListNode head) {
        int len=0;
        ListNode start=head;
        while(start!=null) {
            start=start.next;
            len++;
        }
        for(int i=len/2-1; i>=0; i--){
            int thisnode=i, nextnode=len-1-i,thisval=0, nextval=0;
            start=head;
            for(int j=0; j<=nextnode; j++){
                if(j==i) thisval=start.val;
                if(j==nextnode) nextval=start.val;
                start=start.next;
            }
            if(thisval==nextval) continue;
            else return false;
        }
        return true;
    }
}

//O(n) space o(n) time, reverse the first half during the first iteration, recover while iterate back
public boolean isPalindrome(ListNode head) {
        if (head == null) {
            return true;
        }
        ListNode slow = head, fast = head, rev = null;
        while (fast != null && fast.next != null) {
            ListNode temp = rev;
            rev = slow;
            slow = slow.next;
            fast = fast.next.next;
            rev.next = temp;
        }
        ListNode tail = fast != null ? slow.next : slow;
        while (rev != null) {
            if (tail.val != rev.val) {
                return false;
            }
            ListNode temp = slow;
            slow = rev;
            tail = tail.next;
            rev = rev.next;
            slow.next = temp;
        }
        return true;
    }