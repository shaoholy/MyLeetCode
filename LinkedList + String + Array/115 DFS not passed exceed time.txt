package trycode;

import java.util.HashSet;
import java.util.LinkedList;

public class OneOneFive {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="babgbag";
		String t="bag";
		OneOneFive OOF=new OneOneFive();
		OOF.get115(s, t);

	}
	private void get115(String s, String t) {
		int tlen=t.length(),slen=s.length();
		LinkedList<Integer> curr=new LinkedList<Integer>();
		HashSet<HashSet<Integer>> res=new HashSet<HashSet<Integer>>();
		recur115(s, t, slen, tlen, curr, res);
		System.out.println(res.size());
	}
	
	private void recur115(String s, String t, int slen, int tlen, LinkedList<Integer> curr, HashSet<HashSet<Integer>> res) {
		if(curr.size()==tlen) {
			res.add(new HashSet(curr));
			return;
		}
		for(int i=0; i<s.length()-t.length()+1; i++) {
			if(s.charAt(i)==t.charAt(0)) {
				curr.add(slen-s.length()+i);
				System.out.println(curr);
				recur115(s.substring(i+1), t.substring(1), slen, tlen, curr, res);
				curr.removeLast();
			}
		}

		
	}

}



    public int numDistinct(String s, String t) {
        int res = 0;
        if(t==null || t.length()==0) return res;
        if(s==null || s.length()==0) return res;
        int[][] dp = new int[s.length()][t.length()]; 
        //dp[i][j] as s.substring(0, i + 1) has how many subsequence of t.substring(0, j + 1)
        //So, final res should be res[s.length() - 1][t.length() - 1]
        //for dp[i][j]:only valid when i >= j 
        //base: dp[i][j] = dp[i - 1][j] or i ==0 j == 0, 1 
        //1, if s.charAt(i) == s.charAt(j): 
        // 1), add, dp[i - 1][j - 1]
        //2, if not: just dp[i - 1][j]; 
        for(int i = 0; i < s.length(); i++){
            for(int j = 0; j < t.length() && j <= i; j++){
                if(i == 0 && j == 0){
                    dp[i][j] = s.charAt(0) == t.charAt(0)? 1 : 0;
                }else{
                    if(s.charAt(i) != t.charAt(j)){
                        dp[i][j] = dp[i - 1][j];
                    }else{
                        dp[i][j] = j > 0? dp[i - 1][j] + dp[i - 1][j - 1] : dp[i - 1][j] + 1;
                    }
                }
                //System.out.println(dp[i][j] + " i "+ i + " j " + j);
            }
        }
        return dp[s.length() - 1][t.length() - 1];
    }
